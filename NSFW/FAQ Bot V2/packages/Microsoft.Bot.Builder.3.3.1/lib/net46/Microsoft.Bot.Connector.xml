<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Connector</name>
    </assembly>
    <members>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.OpenUrl">
            <summary>
            Client will open given url in the built-in browser.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.ImBack">
            <summary>
            Client will post message to bot, so all other participants will see that was posted to the bot and who posted this.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PostBack">
            <summary>
            Client will post message to bot privately, so other participants inside conversation will not see that was posted. 
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PlayAudio">
            <summary>
            playback audio container referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.PlayVideo">
            <summary>
            playback video container referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.ShowImage">
            <summary>
            show image referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.DownloadFile">
            <summary>
            download file referenced by url
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActionTypes.Signin">
            <summary>
            Signin button
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Error">
            <summary>
            Object representing error information
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Error.#ctor">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Error.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Error.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Error.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ErrorResponse">
            <summary>
            An HTTP API response
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponse.#ctor">
            <summary>
            Initializes a new instance of the ErrorResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ErrorResponse.#ctor(Microsoft.Bot.Connector.Error)">
            <summary>
            Initializes a new instance of the ErrorResponse class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ErrorResponse.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppIdFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the AppId from the Claims Identity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppPasswordFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the AppPassword from the Claims Identity
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetCredentialsFromClaims(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the MicrosoftAppCredentials using claims in the claims identity
            </summary>
            <param name="claimsIdentity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ICredentialProvider.IsValidAppIdAsync(System.String)">
            <summary>
            Validate AppId
            </summary>
            <param name="appId"></param>
            <returns>true if it is a valid AppId for the controller</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.ICredentialProvider.GetAppPasswordAsync(System.String)">
            <summary>
            Get the app password for a given bot appId, if it is not a valid appId, return Null
            </summary>
            <param name="appId">bot appid</param>
            <returns>password or null for invalid appid</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.StaticCredentialProvider">
            <summary>
            Static credential provider which has the appid and password static
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.SettingsCredentialProvider">
            <summary>
            Credential provider which uses config settings to lookup appId and password
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ErrorCodes">
            <summary>
            Error codes to communicate when throwing an APIException
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.ServiceError">
            <summary>
            Other error, not specified
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.BadArgument">
            <summary>
            Bad argument
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.BadSyntax">
            <summary>
            Error parsing request
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.MissingProperty">
            <summary>
            Mandatory property was not specified
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ErrorCodes.MessageSizeTooBig">
            <summary>
            Message exceeded size limits
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.SigninCard">
            <summary>
            A card representing a request to sign in
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.Create(System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.SigninCard"/>
            </summary>
            <param name="text"> The <see cref="P:Microsoft.Bot.Connector.SigninCard.Text"/></param>
            <param name="buttonLabel"> The signin button label.</param>
            <param name="url"> The sigin url.</param>
            <returns> The created sigin card.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.#ctor">
            <summary>
            Initializes a new instance of the SigninCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.SigninCard.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction})">
            <summary>
            Initializes a new instance of the SigninCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.SigninCard.Text">
            <summary>
            Text for signin request
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.SigninCard.Buttons">
            <summary>
            Action to use to perform signin
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AnimationCard">
            <summary>
            An animation card (Ex: gif or short video clip)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AnimationCard.#ctor">
            <summary>
            Initializes a new instance of the AnimationCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AnimationCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the AnimationCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Subtitle">
            <summary>
            Subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Text">
            <summary>
            Text of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Image">
            <summary>
            Thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Media">
            <summary>
            Array of media Url objects
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Shareable">
            <summary>
            Is it OK for this content to be shareable with others
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Autoloop">
            <summary>
            Should the client loop playback at end of content (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AnimationCard.Autostart">
            <summary>
            Should the client automatically start playback of video in this
            card (default:true)
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AudioCard">
            <summary>
            A audio card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AudioCard.#ctor">
            <summary>
            Initializes a new instance of the AudioCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AudioCard.#ctor(System.String,System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the AudioCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Aspect">
            <summary>
            Aspect ratio of thumbnail/media placeholder, allowed values are
            "16x9" and "9x16"
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Subtitle">
            <summary>
            Subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Text">
            <summary>
            Text of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Image">
            <summary>
            Thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Media">
            <summary>
            Array of media Url objects
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Shareable">
            <summary>
            Is it OK for this content to be shareable with others
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Autoloop">
            <summary>
            Should the client loop playback at end of content (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AudioCard.Autostart">
            <summary>
            Should the client automatically start playback of video in this
            card (default:true)
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.MediaUrl">
            <summary>
            MediaUrl data
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaUrl.#ctor">
            <summary>
            Initializes a new instance of the MediaUrl class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MediaUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the MediaUrl class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaUrl.Url">
            <summary>
            Url for the media
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.MediaUrl.Profile">
            <summary>
            Optional profile hint to the client to differentiate multiple
            MediaUrl objects from each other
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ThumbnailUrl">
            <summary>
            Object describing a media thumbnail
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailUrl.#ctor">
            <summary>
            Initializes a new instance of the ThumbnailUrl class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailUrl.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ThumbnailUrl class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailUrl.Url">
            <summary>
            url pointing to an thumbnail to use for media content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailUrl.Alt">
            <summary>
            Alt text to display for screen readers on the thumbnail image
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.VideoCard">
            <summary>
            A video card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.VideoCard.#ctor">
            <summary>
            Initializes a new instance of the VideoCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.VideoCard.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.ThumbnailUrl,System.Collections.Generic.IList{Microsoft.Bot.Connector.MediaUrl},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the VideoCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Subtitle">
            <summary>
            Subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Text">
            <summary>
            Text of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Image">
            <summary>
            Thumbnail placeholder
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Media">
            <summary>
            Array of media Url objects
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Shareable">
            <summary>
            Is it OK for this content to be shareable with others
            (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Autoloop">
            <summary>
            Should the client loop playback at end of content (default:true)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.VideoCard.Autostart">
            <summary>
            Should the client automatically start playback of video in this
            card (default:true)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ContactRelationUpdateActionTypes.Add">
            <summary>
            Bot added to user contacts
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ContactRelationUpdateActionTypes.Remove">
            <summary>
            Bot removed from user contacts
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HttpClientEx.AddAPIAuthorization(System.Net.Http.HttpClient,System.String,System.String)">
            <summary>
            add Bearer authorization token for making API calls
            </summary>
            <param name="client">The http client</param>
            <param name="appId">(default)Setting["microsoftAppId"]</param>
            <param name="password">(default)Setting["microsoftAppPassword"]</param>
            <returns>HttpClient with Bearer Authorization header</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.IEndOfConversationActivity">
            <summary>
            Conversation is ending, or a request to end the conversation
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ITriggerActivity">
            <summary>
            Activity generated by external sources with open ended value payload
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ITriggerActivity.Value">
            <summary>
            Open ended value 
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ITypingActivity">
            <summary>
            The From address is typing
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Markdown">
            <summary>
            Default- interpret text fields as markdown
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Plain">
            <summary>
            Plain text (do not interpret as anything)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.TextFormatTypes.Xml">
            <summary>
            B, I, S, U, A NOTE: Only supported on Skype for now
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Attachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentUri(System.String,System.String)">
            <summary>
            Get the URI of an attachment view
            </summary>
            <param name="attachmentId"></param>
            <param name="viewId">default is "original"</param>
            <returns>uri</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentStreamAsync(System.String,System.String)">
            <summary>
            Get the given attachmentid view as a stream
            </summary>
            <param name="attachmentId">attachmentid</param>
            <param name="viewId">view to get (default:original)</param>
            <returns>stream of attachment</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Attachments class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachments.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            Get AttachmentInfo structure describing the attachment views
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            Get the named view as binary content
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.ActivityTypes">
            <summary>
            Types of Activities
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Message">
            <summary>
            Message from a user -> bot or bot -> User
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.ContactRelationUpdate">
            <summary>
            Bot added removed to contact list
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.ConversationUpdate">
            <summary>
            This notification is sent when the conversation's properties change, for example the topic name, or when user joins or leaves the group.
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Typing">
            <summary>
            a user is typing
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Ping">
            <summary>
            Bounce a message off of the server without replying or changing it's state
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.EndOfConversation">
            <summary>
            End a conversation
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.Trigger">
            <summary>
            External system has triggered 
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.ActivityTypes.DeleteUserData">
            <summary>
            Delete user data
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentsExtensions">
            <summary>
            Extension methods for Attachments.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfo(Microsoft.Bot.Connector.IAttachments,System.String)">
            <summary>
            GetAttachmentInfo
            </summary>
            Get AttachmentInfo structure describing the attachment views
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            Get AttachmentInfo structure describing the attachment views
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachment(Microsoft.Bot.Connector.IAttachments,System.String,System.String)">
            <summary>
            GetAttachment
            </summary>
            Get the named view as binary content
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            Get the named view as binary content
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStream(Microsoft.Bot.Connector.IAttachments,System.String,System.String)">
            <summary>
            GetAttachmentStream
            </summary>
            Get the named view as binary stream
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStreamAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetAttachmentStreamAsync
            </summary>
            Get the named view as binary content as a stream
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IAttachments">
            <summary>
            Attachments operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentInfoWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachmentInfo
            </summary>
            Get AttachmentInfo structure describing the attachment views
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IAttachments.GetAttachmentWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetAttachment
            </summary>
            Get the named view as binary content
            <param name='attachmentId'>
            attachment id
            </param>
            <param name='viewId'>
            View id from attachmentInfo
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentData">
            <summary>
            Attachment data
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentData.#ctor">
            <summary>
            Initializes a new instance of the AttachmentData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentData.#ctor(System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the AttachmentData class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.Type">
            <summary>
            content type of the attachmnet
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.Name">
            <summary>
            Name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.OriginalBase64">
            <summary>
            original content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentData.ThumbnailBase64">
            <summary>
            Thumbnail
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentInfo">
            <summary>
            Metdata for an attachment
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentInfo.#ctor">
            <summary>
            Initializes a new instance of the AttachmentInfo class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentInfo.#ctor(System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.AttachmentView})">
            <summary>
            Initializes a new instance of the AttachmentInfo class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Name">
            <summary>
            Name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Type">
            <summary>
            ContentType of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentInfo.Views">
            <summary>
            attachment views
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.AttachmentView">
            <summary>
            Attachment View name and size
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentView.#ctor">
            <summary>
            Initializes a new instance of the AttachmentView class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.AttachmentView.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the AttachmentView class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentView.ViewId">
            <summary>
            content type of the attachmnet
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.AttachmentView.Size">
            <summary>
            Name of the attachment
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.CardAction">
            <summary>
            An action on a card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardAction.#ctor">
            <summary>
            Initializes a new instance of the CardAction class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardAction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the CardAction class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Type">
            <summary>
            Defines the type of action implemented by this button.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Title">
            <summary>
            Text description which appear on the button.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Image">
            <summary>
            URL Picture which will appear on the button, next to text label.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardAction.Value">
            <summary>
            Supplementary parameter for action. Content of this property
            depends on the ActionType
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.CardImage">
            <summary>
            An image on a card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardImage.#ctor">
            <summary>
            Initializes a new instance of the CardImage class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.CardImage.#ctor(System.String,System.String,Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the CardImage class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Url">
            <summary>
            URL Thumbnail image for major content property.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Alt">
            <summary>
            Image description intended for screen readers
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.CardImage.Tap">
            <summary>
            Action assigned to specific Attachment.E.g.navigate to specific
            URL or play/open media content
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.HeroCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.HeroCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.HeroCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ThumbnailCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.ThumbnailCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.ThumbnailCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.SigninCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.SigninCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.SigninCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ReceiptCard)">
            <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Connector.ReceiptCard"/>.
            </summary>
            <param name="card"> The instance of <see cref="T:Microsoft.Bot.Connector.ReceiptCard"/>.</param>
            <returns> The generated attachment.</returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationParameters">
            <summary>
            Parameters for creating a new conversation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationParameters.#ctor">
            <summary>
            Initializes a new instance of the ConversationParameters class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationParameters.#ctor(Microsoft.Bot.Connector.ChannelAccount,System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.String)">
            <summary>
            Initializes a new instance of the ConversationParameters class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.IsGroup">
            <summary>
            IsGroup
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.Bot">
            <summary>
            The bot address for this conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.Members">
            <summary>
            Members to add to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationParameters.TopicName">
            <summary>
            (Optional) Topic of the conversation (if supported by the channel)
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.GeoCoordinates">
            <summary>
            GeoCoordinates (entity type: "https://schema.org/GeoCoordinates")
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.GeoCoordinates.#ctor">
            <summary>
            Initializes a new instance of the GeoCoordinates class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.GeoCoordinates.#ctor(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the GeoCoordinates class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Elevation">
            <summary>
            Elevation of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Latitude">
            <summary>
            Latitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Longitude">
            <summary>
            Longitude of the location [WGS
            84](https://en.wikipedia.org/wiki/World_Geodetic_System)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Type">
            <summary>
            The type of the thing
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.GeoCoordinates.Name">
            <summary>
            The name of the thing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Place">
            <summary>
            Place (entity type: "https://schema.org/Place")
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Place.#ctor">
            <summary>
            Initializes a new instance of the Place class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Place.#ctor(System.Object,System.Object,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the Place class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Address">
            <summary>
            Address of the place (may be `string` or complex object of type
            `PostalAddress`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Geo">
            <summary>
            Geo coordinates of the place (may be complex object of type
            `GeoCoordinates` or `GeoShape`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.HasMap">
            <summary>
            Map to the place (may be `string` (URL) or complex object of type
            `Map`)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Type">
            <summary>
            The type of the thing
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Place.Name">
            <summary>
            The name of the thing
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ResourceResponse">
            <summary>
            A response containing a resource ID
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ResourceResponse.#ctor">
            <summary>
            Initializes a new instance of the ResourceResponse class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ResourceResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ResourceResponse class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ResourceResponse.Id">
            <summary>
            Id of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ThumbnailCard">
            <summary>
            A thumbnail card (card with a single, small thumbnail image)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailCard.#ctor">
            <summary>
            Initializes a new instance of the ThumbnailCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ThumbnailCard.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardImage},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the ThumbnailCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Subtitle">
            <summary>
            Subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Text">
            <summary>
            Text for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Images">
            <summary>
            Array of images for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ThumbnailCard.Tap">
            <summary>
            This action will be activated when user taps on the card itself
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppId">
            <summary>
            Microsoft AppId for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppPassword.  Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppPassword">
            <summary>
            Microsoft AppPassword for the bot (needs to be used with MicrosoftAppId)
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppId. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppIdSettingName">
            <summary>
            Name of Setting in web.config which has the Microsoft AppId for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppPasswordSettingName. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.MicrosoftAppPasswordSettingName">
            <summary>
            Name of Setting in web.config which has the Microsoft App Password for the bot 
            </summary>
            <remarks>
            Needs to be used with MicrosoftAppIdSettingName. Ignored if CredentialProviderType is specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotAuthentication.CredentialProviderType">
            <summary>
            Type which implements ICredentialProvider interface to allow multiple bot AppIds to be registered for the same endpoint
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of bot authenticator. 
            </summary>
            <param name="microsoftAppId"> The Microsoft app Id.</param>
            <param name="microsoftAppPassword"> The Microsoft app password.</param>
            <remarks> This constructor sets the <see cref="F:Microsoft.Bot.Connector.BotAuthenticator.openIdConfigurationUrl"/> to 
            <see cref="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelOpenIdMetadataUrl"/>  and doesn't disable 
            the self issued tokens used by emulator.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotAuthenticator.TryAuthenticateAsync(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.IActivity},System.Threading.CancellationToken)">
            <summary>
            Authenticates the incoming request and add the <see cref="P:Microsoft.Bot.Connector.IActivity.ServiceUrl"/> for each
            activities to <see cref="F:Microsoft.Bot.Connector.MicrosoftAppCredentials.TrustedHostNames"/> if the request is authenticated.
            </summary>
            <param name="request"> The request that should be authenticated.</param>
            <param name="activities"> The activities extracted from request.</param>
            <param name="token"> The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationsExtensions">
            <summary>
            Extension methods for Conversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='bot'>Bot to create conversation from</param>
            <param name='user'>User to create conversation with</param>
            <param name='cancellationToken'>The cancellation token.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a new direct conversation between a bot and a user
            </summary>
            <param name='operations'>The operations group for this extension method.</param>
            <param name='botAddress'>Bot to create conversation from</param>
            <param name='userAddress'>User to create conversation with</param>
            <param name='cancellationToken'>The cancellation token</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Send an activity to a conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Replyto an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Reply to an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            Update an activity in an existing conversation
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to update
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters)">
            <summary>
            CreateConversation
            </summary>
            Create a new Conversation.
            
            POST to this method with a
            * Bot being the bot creating the conversation
            * IsGroup set to true if this is not a direct message (default is false)
            * Members array contining the members you want to have be in the
            conversation.
            
            The return value is a ResourceResponse which contains a conversation id
            which is suitable for use
            in the message payload and REST API uris.
            
            Most channels only support the semantics of bots initiating a direct
            message conversation.  An example of how to do that would be:
            
            ```
            var resource = await connector.conversations.CreateConversation(new
            ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
            ChannelAccount("user1") } );
            await connect.Conversations.SendToConversationAsync(resource.Id, new
            Activity() ... ) ;
            
            ```
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='parameters'>
            Parameters to create the conversation from
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters,System.Threading.CancellationToken)">
            <summary>
            CreateConversation
            </summary>
            Create a new Conversation.
            
            POST to this method with a
            * Bot being the bot creating the conversation
            * IsGroup set to true if this is not a direct message (default is false)
            * Members array contining the members you want to have be in the
            conversation.
            
            The return value is a ResourceResponse which contains a conversation id
            which is suitable for use
            in the message payload and REST API uris.
            
            Most channels only support the semantics of bots initiating a direct
            message conversation.  An example of how to do that would be:
            
            ```
            var resource = await connector.conversations.CreateConversation(new
            ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
            ChannelAccount("user1") } );
            await connect.Conversations.SendToConversationAsync(resource.Id, new
            Activity() ... ) ;
            
            ```
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='parameters'>
            Parameters to create the conversation from
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.String)">
            <summary>
            SendToConversation
            </summary>
            This method allows you to send an activity to the end of a conversation.
            
            This is slightly different from ReplyToActivity().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.String,System.Threading.CancellationToken)">
            <summary>
            SendToConversation
            </summary>
            This method allows you to send an activity to the end of a conversation.
            
            This is slightly different from ReplyToActivity().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)">
            <summary>
            UpdateActivity
            </summary>
            Edit an existing activity.
            
            Some channels allow you to edit an existing activity to reflect the new
            state of a bot conversation.
            
            For example, you can remove buttons after someone has clicked "Approve"
            button.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to update
            </param>
            <param name='activity'>
            replacement Activity
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            UpdateActivity
            </summary>
            Edit an existing activity.
            
            Some channels allow you to edit an existing activity to reflect the new
            state of a bot conversation.
            
            For example, you can remove buttons after someone has clicked "Approve"
            button.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to update
            </param>
            <param name='activity'>
            replacement Activity
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)">
            <summary>
            ReplyToActivity
            </summary>
            This method allows you to reply to an activity.
            
            This is slightly different from SendToConversation().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId the reply is to (OPTIONAL)
            </param>
            <param name='activity'>
            Activity to send
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)">
            <summary>
            ReplyToActivity
            </summary>
            This method allows you to reply to an activity.
            
            This is slightly different from SendToConversation().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId the reply is to (OPTIONAL)
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String)">
            <summary>
            DeleteActivity
            </summary>
            Delete an existing activity.
            
            Some channels allow you to delete an existing activity, and if successful
            this method will remove the specified activity.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to delete
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            DeleteActivity
            </summary>
            Delete an existing activity.
            
            Some channels allow you to delete an existing activity, and if successful
            this method will remove the specified activity.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to delete
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembers(Microsoft.Bot.Connector.IConversations,System.String)">
            <summary>
            GetConversationMembers
            </summary>
            Enumerate the members of a converstion.
            
            This REST API takes a ConversationId and returns an array of
            ChannelAccount objects representing the members of the conversation.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)">
            <summary>
            GetConversationMembers
            </summary>
            Enumerate the members of a converstion.
            
            This REST API takes a ConversationId and returns an array of
            ChannelAccount objects representing the members of the conversation.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembers(Microsoft.Bot.Connector.IConversations,System.String,System.String)">
            <summary>
            GetActivityMembers
            </summary>
            Enumerate the members of an activity.
            
            This REST API takes a ConversationId and a ActivityId, returning an array
            of ChannelAccount objects representing the members of the particular
            activity in the conversation.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            Activity ID
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetActivityMembers
            </summary>
            Enumerate the members of an activity.
            
            This REST API takes a ConversationId and a ActivityId, returning an array
            of ChannelAccount objects representing the members of the particular
            activity in the conversation.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            Activity ID
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachment(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData)">
            <summary>
            UploadAttachment
            </summary>
            Upload an attachment directly into a channel's blob storage.
            
            This is useful because it allows you to store data in a compliant store
            when dealing with enterprises.
            
            The response is a ResourceResponse which contains an AttachmentId which is
            suitable for using with the attachments API.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='attachmentUpload'>
            Attachment data
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData,System.Threading.CancellationToken)">
            <summary>
            UploadAttachment
            </summary>
            Upload an attachment directly into a channel's blob storage.
            
            This is useful because it allows you to store data in a compliant store
            when dealing with enterprises.
            
            The response is a ResourceResponse which contains an AttachmentId which is
            suitable for using with the attachments API.
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='attachmentUpload'>
            Attachment data
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.JwtConfig">
            <summary>
            Configuration for JWT tokens
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromChannelOpenIdMetadataUrl">
            <summary>
            TO BOT FROM CHANNEL: OpenID metadata document for tokens coming from MSA
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.JwtConfig.GetToBotFromChannelTokenValidationParameters(System.IdentityModel.Tokens.AudienceValidator)">
            <summary>
            TO BOT FROM CHANNEL: Token validation parameters when connecting to a bot
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromMSAOpenIdMetadataUrl">
            <summary>
            TO BOT FROM MSA: OpenID metadata document for tokens coming from MSA
            </summary>
            <remarks>
            These settings are used to allow access from the Bot Framework Emulator
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtConfig.ToBotFromMSATokenValidationParameters">
            <summary>
            TO BOT FROM MSA: Token validation parameters when connecting to a channel
            </summary>
            <remarks>
            These settings are used to allow access from the Bot Framework Emulator
            </remarks>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._openIdMetadataCache">
            <summary>
            Shared of OpenIdConnect configuration managers (one per metadata URL)
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._tokenValidationParameters">
            <summary>
            Token validation parameters for this instance
            </summary>
        </member>
        <member name="F:Microsoft.Bot.Connector.JwtTokenExtractor._openIdMetadata">
            <summary>
            OpenIdConnect configuration manager for this instances
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.TrustServiceUrl(System.String,System.DateTime)">
            <summary>
            Adds the host of service url to <see cref="T:Microsoft.Bot.Connector.MicrosoftAppCredentials"/> trusted hosts.
            </summary>
            <param name="serviceUrl">The service url</param>
            <param name="expirationTime">The expiration time after which this service url is not trusted anymore</param>
            <remarks>If expiration time is not provided, the expiration time will DateTime.UtcNow.AddDays(1).</remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.IsTrustedServiceUrl(System.String)">
            <summary>
            Checks if the service url is for a trusted host or not.
            </summary>
            <param name="serviceUrl">The service url</param>
            <returns>True if the host of the service url is trusted; False otherwise.</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.MicrosoftAppCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Apply the credentials to the HTTP request.
            </summary>
            <param name="request">The HTTP request.</param><param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.StateClient">
            <summary>
            The Bot State REST API allows your bot to store and retrieve state
            associated with conversations conducted through
            the [Bot Connector REST API](/en-us/restapi/connector). The Bot State
            REST API uses REST and HTTPS to send and receive
            encoded content that your bot controls.
            
            Client libraries for this REST API are available. See below for a
            list.
            
            Your bot may store data for a user, a conversation, or a single user
            within a conversation (called "private" data).
            Each payload may be up to 32 kilobytes in size. The data may be
            removed by the bot or upon a user's request, e.g.
            if the user requests the channel to inform the bot (and therefore, the
            Bot Framework) to delete the user's data.
            
            The Bot State REST API is only useful in conjunction with the Bot
            Connector REST API.
            
            Authentication for both the Bot State and Bot Connector REST APIs is
            accomplished with JWT Bearer tokens, and is
            described in detail in the [Connector
            Authentication](/en-us/restapi/authentication) document.
            
            # Client Libraries for the Bot State REST API
            
            * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
            * [Bot Builder for Node.js](/en-us/node/builder/overview/)
            * Generate your own from the [State API Swagger
            file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/StateAPI.json)
            
            © 2016 Microsoft
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="microsoftAppId">Optional. Your Microsoft app id. If null, this setting is read from settings["MicrosoftAppId"]</param>
            <param name="microsoftAppPassword">Optional. Your Microsoft app password. If null, this setting is read from settings["MicrosoftAppPassword"]</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Bot.Connector.ICredentialProvider,System.Security.Claims.ClaimsIdentity,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class using Credential source
            </summary>
            <param name="baseUri">Base URI for the State service</param>
            <param name="credentialProvider">Credential source to use</param>
            <param name="claimsIdentity">ClaimsIDentity to create the client for</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Bot.Connector.ICredentialProvider,System.Security.Claims.ClaimsIdentity,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class using Credential source
            </summary>
            <param name="credentialProvider">Credential source to use</param>
            <param name="claimsIdentity">ClaimsIDentity to create the client for</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the StateClient class
            </summary>
            <remarks> This constructor will use https://state.botframework.com as the baseUri</remarks>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.StateClient.BotState">
            <summary>
            Gets the IBotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the StateClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.StateClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.HeroCard">
            <summary>
            A Hero card (card with a single, large image)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HeroCard.#ctor">
            <summary>
            Initializes a new instance of the HeroCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.HeroCard.#ctor(System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardImage},System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction},Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the HeroCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Subtitle">
            <summary>
            Subtitle of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Text">
            <summary>
            Text for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Images">
            <summary>
            Array of images for the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.HeroCard.Tap">
            <summary>
            This action will be activated when user taps on the card itself
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ReceiptCard">
            <summary>
            A receipt card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptCard.#ctor">
            <summary>
            Initializes a new instance of the ReceiptCard class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptCard.#ctor(System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.ReceiptItem},System.Collections.Generic.IList{Microsoft.Bot.Connector.Fact},Microsoft.Bot.Connector.CardAction,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.CardAction})">
            <summary>
            Initializes a new instance of the ReceiptCard class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Title">
            <summary>
            Title of the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Items">
            <summary>
            Array of Receipt Items
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Facts">
            <summary>
            Array of Fact Objects   Array of key-value pairs.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Tap">
            <summary>
            This action will be activated when user taps on the card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Total">
            <summary>
            Total amount of money paid (or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Tax">
            <summary>
            Total amount of TAX paid(or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Vat">
            <summary>
            Total amount of VAT paid(or should be paid)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptCard.Buttons">
            <summary>
            Set of actions applicable to the current card
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotState">
            <summary>
            BotState operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.#ctor(Microsoft.Bot.Connector.StateClient)">
            <summary>
            Initializes a new instance of the BotState class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotState.Client">
            <summary>
            Gets a reference to the StateClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetUserDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            Get a bots data for the user across all conversations
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetUserDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            Update the bot's data for a user
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.DeleteStateForUserWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetConversationDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            get the bots data for all users in a conversation
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetConversationDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            Update the bot's data for all users in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.GetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            get bot's data for a single user in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotState.SetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            Update the bot's data for a single user in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.BotStateExtensions">
            <summary>
            Extension methods for BotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            GetUserData
            </summary>
            Get a bots data for the user across all conversations
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            Get a bots data for the user across all conversations
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetUserData
            </summary>
            Update the bot's data for a user
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            Update the bot's data for a user
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUser(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            DeleteStateForUser
            </summary>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUserAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String)">
            <summary>
            GetConversationData
            </summary>
            get the bots data for all users in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            get the bots data for all users in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetConversationData
            </summary>
            Update the bot's data for all users in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            Update the bot's data for all users in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String)">
            <summary>
            GetPrivateConversationData
            </summary>
            get bot's data for a single user in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            get bot's data for a single user in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData)">
            <summary>
            SetPrivateConversationData
            </summary>
            Update the bot's data for a single user in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            Update the bot's data for a single user in a conversation
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IBotState">
            <summary>
            BotState operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetUserDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetUserData
            </summary>
            Get a bots data for the user across all conversations
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetUserDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetUserData
            </summary>
            Update the bot's data for a user
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.DeleteStateForUserWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteStateForUser
            </summary>
            Delete all data for a user in a channel (UserData and
            PrivateConversationData)
            <param name='channelId'>
            channelId
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetConversationDataWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationData
            </summary>
            get the bots data for all users in a conversation
            <param name='channelId'>
            the channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetConversationDataWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetConversationData
            </summary>
            Update the bot's data for all users in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.GetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetPrivateConversationData
            </summary>
            get bot's data for a single user in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IBotState.SetPrivateConversationDataWithHttpMessagesAsync(System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SetPrivateConversationData
            </summary>
            Update the bot's data for a single user in a conversation
            <param name='channelId'>
            channelId
            </param>
            <param name='conversationId'>
            The id for the conversation on the channel
            </param>
            <param name='userId'>
            id for the user on the channel
            </param>
            <param name='botData'>
            the new botdata
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.IStateClient">
            <summary>
            The Bot State REST API allows your bot to store and retrieve state
            associated with conversations conducted through
            the [Bot Connector REST API](/en-us/restapi/connector). The Bot State
            REST API uses REST and HTTPS to send and receive
            encoded content that your bot controls.
            
            Client libraries for this REST API are available. See below for a
            list.
            
            Your bot may store data for a user, a conversation, or a single user
            within a conversation (called "private" data).
            Each payload may be up to 32 kilobytes in size. The data may be
            removed by the bot or upon a user's request, e.g.
            if the user requests the channel to inform the bot (and therefore, the
            Bot Framework) to delete the user's data.
            
            The Bot State REST API is only useful in conjunction with the Bot
            Connector REST API.
            
            Authentication for both the Bot State and Bot Connector REST APIs is
            accomplished with JWT Bearer tokens, and is
            described in detail in the [Connector
            Authentication](/en-us/restapi/authentication) document.
            
            # Client Libraries for the Bot State REST API
            
            * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
            * [Bot Builder for Node.js](/en-us/node/builder/overview/)
            * Generate your own from the [State API Swagger
            file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/StateAPI.json)
            
            © 2016 Microsoft
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IStateClient.BotState">
            <summary>
            Gets the IBotState.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.#ctor">
            <summary>
            Initializes a new instance of the BotData class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the BotData class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotData.ETag">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.BotData.Data">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.GetProperty``1(System.String)">
            <summary>
            Get a property from a BotData recorded retrieved using the REST API
            </summary>
            <param name="property">property name to change</param>
            <returns>property requested or default for type</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.SetProperty``1(System.String,``0)">
            <summary>
            Set a property on a BotData record retrieved using the REST API
            </summary>
            <param name="property">property name to change</param>
            <param name="data">new data</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.BotData.RemoveProperty(System.String)">
            <summary>
            Remove a property from the BotData record
            </summary>
            <param name="property">property name to remove</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConnectorClient">
            <summary>
            ﻿The Bot Connector REST API allows your bot to send and receive
            messages to channels configured in the
            [Bot Framework Developer Portal](https://dev.botframework.com). The
            Connector service uses industry-standard REST
            and JSON over HTTPS.
            
            Client libraries for this REST API are available. See below for a
            list.
            
            Many bots will use both the Bot Connector REST API and the associated
            [Bot State REST API](/en-us/restapi/state). The
            Bot State REST API allows a bot to store and retrieve state associated
            with users and conversations.
            
            Authentication for both the Bot Connector and Bot State REST APIs is
            accomplished with JWT Bearer tokens, and is
            described in detail in the [Connector
            Authentication](/en-us/restapi/authentication) document.
            
            # Client Libraries for the Bot Connector REST API
            
            * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
            * [Bot Builder for Node.js](/en-us/node/builder/overview/)
            * Generate your own from the [Connector API Swagger
            file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)
            
            © 2016 Microsoft
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the ConnectorClient class.
            </summary>
            <param name='baseUri'>
            Optional. The base URI of the service.
            </param>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="microsoftAppId">Optional. Your Microsoft app id. If null, this setting is read from settings["MicrosoftAppId"]</param>
            <param name="microsoftAppPassword">Optional. Your Microsoft app password. If null, this setting is read from settings["MicrosoftAppPassword"]</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConnectorClient.#ctor(System.Uri,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.Boolean,System.Net.Http.DelegatingHandler[])">
            <summary>
            Create a new instance of the ConnectorClient class
            </summary>
            <param name="baseUri">Base URI for the Connector service</param>
            <param name="credentials">Credentials for the Connector service</param>
            <param name="addJwtTokenRefresher">True, if JwtTokenRefresher should be included; False otherwise.</param>
            <param name="handlers">Optional. The delegating handlers to add to the http client pipeline.</param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Conversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.#ctor(Microsoft.Bot.Connector.ConnectorClient)">
            <summary>
            Initializes a new instance of the Conversations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
        </member>
        <member name="P:Microsoft.Bot.Connector.Conversations.Client">
            <summary>
            Gets a reference to the ConnectorClient
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            CreateConversation
            </summary>
            Create a new Conversation.
            
            POST to this method with a
            * Bot being the bot creating the conversation
            * IsGroup set to true if this is not a direct message (default is false)
            * Members array contining the members you want to have be in the
            conversation.
            
            The return value is a ResourceResponse which contains a conversation id
            which is suitable for use
            in the message payload and REST API uris.
            
            Most channels only support the semantics of bots initiating a direct
            message conversation.  An example of how to do that would be:
            
            ```
            var resource = await connector.conversations.CreateConversation(new
            ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new
            ChannelAccount("user1") } );
            await connect.Conversations.SendToConversationAsync(resource.Id, new
            Activity() ... ) ;
            
            ```
            <param name='parameters'>
            Parameters to create the conversation from
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.SendToConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.Activity,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SendToConversation
            </summary>
            This method allows you to send an activity to the end of a conversation.
            
            This is slightly different from ReplyToActivity().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='activity'>
            Activity to send
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            UpdateActivity
            </summary>
            Edit an existing activity.
            
            Some channels allow you to edit an existing activity to reflect the new
            state of a bot conversation.
            
            For example, you can remove buttons after someone has clicked "Approve"
            button.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to update
            </param>
            <param name='activity'>
            replacement Activity
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            ReplyToActivity
            </summary>
            This method allows you to reply to an activity.
            
            This is slightly different from SendToConversation().
            * SendToConverstion(conversationId) - will append the activity to the end
            of the conversation according to the timestamp or semantics of the
            channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity as a
            reply to another activity, if the channel supports it. If the channel
            does not support nested replies, ReplyToActivity falls back to
            SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId the reply is to (OPTIONAL)
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteActivity
            </summary>
            Delete an existing activity.
            
            Some channels allow you to delete an existing activity, and if successful
            this method will remove the specified activity.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to delete
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationMembers
            </summary>
            Enumerate the members of a converstion.
            
            This REST API takes a ConversationId and returns an array of
            ChannelAccount objects representing the members of the conversation.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetActivityMembers
            </summary>
            Enumerate the members of an activity.
            
            This REST API takes a ConversationId and a ActivityId, returning an array
            of ChannelAccount objects representing the members of the particular
            activity in the conversation.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            Activity ID
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Bot.Connector.Conversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            UploadAttachment
            </summary>
            Upload an attachment directly into a channel's blob storage.
            
            This is useful because it allows you to store data in a compliant store
            when dealing with enterprises.
            
            The response is a ResourceResponse which contains an AttachmentId which is
            suitable for using with the attachments API.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='attachmentUpload'>
            Attachment data
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConnectorClient">
            <summary>
            ﻿The Bot Connector REST API allows your bot to send and receive
            messages to channels configured in the
            [Bot Framework Developer Portal](https://dev.botframework.com). The
            Connector service uses industry-standard REST
            and JSON over HTTPS.
            
            Client libraries for this REST API are available. See below for a
            list.
            
            Many bots will use both the Bot Connector REST API and the associated
            [Bot State REST API](/en-us/restapi/state). The
            Bot State REST API allows a bot to store and retrieve state associated
            with users and conversations.
            
            Authentication for both the Bot Connector and Bot State REST APIs is
            accomplished with JWT Bearer tokens, and is
            described in detail in the [Connector
            Authentication](/en-us/restapi/authentication) document.
            
            # Client Libraries for the Bot Connector REST API
            
            * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)
            * [Bot Builder for Node.js](/en-us/node/builder/overview/)
            * Generate your own from the [Connector API Swagger
            file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)
            
            © 2016 Microsoft
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Attachments">
            <summary>
            Gets the IAttachments.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConnectorClient.Conversations">
            <summary>
            Gets the IConversations.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversations">
            <summary>
            Conversations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.CreateConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.ConversationParameters,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            CreateConversation
            </summary>
            Create a new Conversation.
            
            POST to this method with a
            * Bot being the bot creating the conversation
            * IsGroup set to true if this is not a direct message (default is
            false)
            * Members array contining the members you want to have be in the
            conversation.
            
            The return value is a ResourceResponse which contains a
            conversation id which is suitable for use
            in the message payload and REST API uris.
            
            Most channels only support the semantics of bots initiating a
            direct message conversation.  An example of how to do that would
            be:
            
            ```
            var resource = await
            connector.conversations.CreateConversation(new ConversationParameters(){
            Bot = bot, members = new ChannelAccount[] { new
            ChannelAccount("user1") } );
            await connect.Conversations.SendToConversationAsync(resource.Id,
            new Activity() ... ) ;
            
            ```
            <param name='parameters'>
            Parameters to create the conversation from
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.SendToConversationWithHttpMessagesAsync(Microsoft.Bot.Connector.Activity,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            SendToConversation
            </summary>
            This method allows you to send an activity to the end of a
            conversation.
            
            This is slightly different from ReplyToActivity().
            * SendToConverstion(conversationId) - will append the activity to
            the end of the conversation according to the timestamp or
            semantics of the channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity
            as a reply to another activity, if the channel supports it. If
            the channel does not support nested replies, ReplyToActivity
            falls back to SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='activity'>
            Activity to send
            </param>
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UpdateActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            UpdateActivity
            </summary>
            Edit an existing activity.
            
            Some channels allow you to edit an existing activity to reflect
            the new state of a bot conversation.
            
            For example, you can remove buttons after someone has clicked
            "Approve" button.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to update
            </param>
            <param name='activity'>
            replacement Activity
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.ReplyToActivityWithHttpMessagesAsync(System.String,System.String,Microsoft.Bot.Connector.Activity,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            ReplyToActivity
            </summary>
            This method allows you to reply to an activity.
            
            This is slightly different from SendToConversation().
            * SendToConverstion(conversationId) - will append the activity to
            the end of the conversation according to the timestamp or
            semantics of the channel.
            * ReplyToActivity(conversationId,ActivityId) - adds the activity
            as a reply to another activity, if the channel supports it. If
            the channel does not support nested replies, ReplyToActivity
            falls back to SendToConversation.
            
            Use ReplyToActivity when replying to a specific activity in the
            conversation.
            
            Use SendToConversation in all other cases.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId the reply is to (OPTIONAL)
            </param>
            <param name='activity'>
            Activity to send
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.DeleteActivityWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            DeleteActivity
            </summary>
            Delete an existing activity.
            
            Some channels allow you to delete an existing activity, and if
            successful this method will remove the specified activity.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            activityId to delete
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetConversationMembersWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetConversationMembers
            </summary>
            Enumerate the members of a converstion.
            
            This REST API takes a ConversationId and returns an array of
            ChannelAccount objects representing the members of the
            conversation.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.GetActivityMembersWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            GetActivityMembers
            </summary>
            Enumerate the members of an activity.
            
            This REST API takes a ConversationId and a ActivityId, returning
            an array of ChannelAccount objects representing the members of
            the particular activity in the conversation.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='activityId'>
            Activity ID
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Bot.Connector.IConversations.UploadAttachmentWithHttpMessagesAsync(System.String,Microsoft.Bot.Connector.AttachmentData,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            UploadAttachment
            </summary>
            Upload an attachment directly into a channel's blob storage.
            
            This is useful because it allows you to store data in a compliant
            store when dealing with enterprises.
            
            The response is a ResourceResponse which contains an AttachmentId
            which is suitable for using with the attachments API.
            <param name='conversationId'>
            Conversation ID
            </param>
            <param name='attachmentUpload'>
            Attachment data
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Activity">
            <summary>
            An Activity is the basic communication type for the Bot Framework 3.0
            protocol
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.CreateReply(System.String,System.String)">
            <summary>
            Take a message and create a reply message for it with the routing information 
            set up to correctly route a reply to the source message
            </summary>
            <param name="text">text you want to reply with</param>
            <param name="locale">language of your reply</param>
            <returns>message set up to route back to the sender</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.IsActivity(System.String)">
            <summary>
            True if the Activity is of the specified activity type
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsMessageActivity">
            <summary>
            Return an IMessageActivity mask if this is a message activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsContactRelationUpdateActivity">
            <summary>
            Return an IContactRelationUpdateActivity mask if this is a contact relation update activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsConversationUpdateActivity">
            <summary>
            Return an IConversationUpdateActivity mask if this is a conversation update activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsTypingActivity">
            <summary>
            Return an ITypingActivity mask if this is a typing activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsTriggerActivity">
            <summary>
            Return an ITriggerActivity mask if this is a trigger activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.AsEndOfConversationActivity">
            <summary>
            Return an IEndOfConversationActivity mask if this is an end of conversation activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetStateClient(Microsoft.Bot.Connector.MicrosoftAppCredentials,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Get StateClient appropriate for this activity
            </summary>
            <param name="credentials">credentials for bot to access state api</param>
            <param name="serviceUrl">alternate serviceurl to use for state service</param>
            <param name="handlers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetStateClient(System.String,System.String,System.String,System.Net.Http.DelegatingHandler[])">
            <summary>
            Get StateClient appropriate for this activity
            </summary>
            <param name="microsoftAppId"></param>
            <param name="microsoftAppPassword"></param>
            <param name="serviceUrl">alternate serviceurl to use for state service</param>
            <param name="handlers"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.HasContent">
            <summary>
            Check if the message has content
            </summary>
            <returns>Returns true if this message has any content to send</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetMentions">
            <summary>
            Get mentions 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.MentionsId(System.String)">
            <summary>
            Is there a mention of Id in the Text Property 
            </summary>
            <param name="id">ChannelAccount.Id</param>
            <returns>true if this id is mentioned in the text</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.MentionsRecipient">
            <summary>
            Is there a mention of Recipient.Id in the Text Property 
            </summary>
            <returns>true if this id is mentioned in the text</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.RemoveRecipientMention">
            <summary>
            Remove recipient mention text from Text property
            </summary>
            <returns>new .Text property value</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.RemoveMentionText(System.String)">
            <summary>
            Replace any mention text for given id from Text property
            </summary>
            <param name="id">id to match</param>
            <returns>new .Text property value</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetChannelData``1">
            <summary>
            Get channeldata as typed structure
            </summary>
            <typeparam name="TypeT">type to use</typeparam>
            <returns>typed object or default(TypeT)</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.GetActivityType">
            <summary>
            Return the "major" portion of the activity
            </summary>
            <returns>normalized major portion of the activity, aka message/... will return "message"</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.#ctor">
            <summary>
            Initializes a new instance of the Activity class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Activity.#ctor(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ConversationAccount,Microsoft.Bot.Connector.ChannelAccount,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.Collections.Generic.IList{Microsoft.Bot.Connector.ChannelAccount},System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Bot.Connector.Attachment},System.Collections.Generic.IList{Microsoft.Bot.Connector.Entity},System.Object,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the Activity class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Type">
            <summary>
            The type of the activity
            [message|contactRelationUpdate|converationUpdate|typing]
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Id">
            <summary>
            Id for the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Timestamp">
            <summary>
            UTC Time when message was sent (Set by service)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.LocalTimestamp">
            <summary>
            Local time when message was sent (set by client Ex:
            2016-09-23T13:07:49.4714686-07:00)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ServiceUrl">
            <summary>
            Service endpoint
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ChannelId">
            <summary>
            ChannelId the activity was on
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.From">
            <summary>
            Sender address
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Conversation">
            <summary>
            Conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Recipient">
            <summary>
            (Outbound to bot only) Bot's address that received the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.TextFormat">
            <summary>
            Format of text fields [plain|markdown] Default:markdown
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.AttachmentLayout">
            <summary>
            AttachmentLayout - hint for how to deal with multiple attachments
            Values: [list|carousel] Default:list
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.MembersAdded">
            <summary>
            Array of address added
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.MembersRemoved">
            <summary>
            Array of addresses removed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.TopicName">
            <summary>
            Conversations new topic name
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.HistoryDisclosed">
            <summary>
            the previous history of the channel was disclosed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Locale">
            <summary>
            The language code of the Text field
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Text">
            <summary>
            Content for the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Summary">
            <summary>
            Text to display if you can't render cards
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Attachments">
            <summary>
            Attachments
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Entities">
            <summary>
            Collection of Entity objects, each of which contains metadata
            about this activity. Each Entity object is typed.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ChannelData">
            <summary>
            Channel specific payload
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Action">
            <summary>
            ContactAdded/Removed action
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.ReplyToId">
            <summary>
            the original id this message is a response to
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Activity.Value">
            <summary>
            Open ended value
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Attachment">
            <summary>
            An attachment within an activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachment.#ctor">
            <summary>
            Initializes a new instance of the Attachment class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Attachment.#ctor(System.String,System.String,System.Object,System.String,System.String)">
            <summary>
            Initializes a new instance of the Attachment class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ContentType">
            <summary>
            mimetype/Contenttype for the file
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ContentUrl">
            <summary>
            Content Url
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.Content">
            <summary>
            Embedded content
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.Name">
            <summary>
            (OPTIONAL) The name of the attachment
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Attachment.ThumbnailUrl">
            <summary>
            (OPTIONAL) Thumbnail associated with attachment
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ChannelAccount">
            <summary>
            Channel account information needed to route a message
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ChannelAccount.#ctor">
            <summary>
            Initializes a new instance of the ChannelAccount class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ChannelAccount.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ChannelAccount class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ChannelAccount.Id">
            <summary>
            Channel id for the user or bot on this channel (Example:
            joe@smith.com, or @joesmith or 123456)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ChannelAccount.Name">
            <summary>
            Display friendly name
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ConversationAccount">
            <summary>
            Channel account information for a conversation
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationAccount.#ctor">
            <summary>
            Initializes a new instance of the ConversationAccount class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ConversationAccount.#ctor(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Initializes a new instance of the ConversationAccount class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.IsGroup">
            <summary>
            Is this a reference to a group
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.Id">
            <summary>
            Channel id for the user or bot on this channel (Example:
            joe@smith.com, or @joesmith or 123456)
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ConversationAccount.Name">
            <summary>
            Display friendly name
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Entity">
            <summary>
            Object of schema.org types
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.#ctor">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Entity.Type">
            <summary>
            Entity Type (typically from schema.org types)
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.GetAs``1">
            <summary>
            Retrieve internal payload.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.Entity.SetAs``1(``0)">
            <summary>
            Set internal payload.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="T:Microsoft.Bot.Connector.Fact">
            <summary>
            Set of key-value pairs. Advantage of this section is that key and
            value properties will be
            rendered with default style information with some
            delimiter between them. So there is no need for developer to specify
            style information.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Fact.#ctor">
            <summary>
            Initializes a new instance of the Fact class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Fact.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Fact class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Fact.Key">
            <summary>
            The key for this Fact
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.Fact.Value">
            <summary>
            The value for this Fact
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.ReceiptItem">
            <summary>
            An item on a receipt card
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptItem.#ctor">
            <summary>
            Initializes a new instance of the ReceiptItem class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.ReceiptItem.#ctor(System.String,System.String,System.String,Microsoft.Bot.Connector.CardImage,System.String,System.String,Microsoft.Bot.Connector.CardAction)">
            <summary>
            Initializes a new instance of the ReceiptItem class.
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Title">
            <summary>
            Title of the Card
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Subtitle">
            <summary>
            Subtitle appears just below Title field, differs from Title in
            font styling only
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Text">
            <summary>
            Text field appears just below subtitle, differs from Subtitle in
            font styling only
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Price">
            <summary>
            Amount with currency
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Quantity">
            <summary>
            Number of items of given kind
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.ReceiptItem.Tap">
            <summary>
            This action will be activated when user taps on the Item bubble.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.Mention">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.Mention.#ctor">
            <summary>
            Initializes a new instance of the Entity class.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IActivity">
            <summary>
            basic shared properties for all activities
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Type">
            <summary>
            Activity type
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Id">
            <summary>
            Id for the activity
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ServiceUrl">
            <summary>
            ServiceUrl
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Timestamp">
            <summary>
            UTC Time when message was sent
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.LocalTimestamp">
            <summary>
            Client Time when message was sent Ex: 2016-09-23T13:07:49.4714686-07:00
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ChannelId">
            <summary>
            Channel this activity is associated with
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.From">
            <summary>
            Sender address data 
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Conversation">
            <summary>
            Address for the conversation that this activity is associated with
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.Recipient">
            <summary>
            Address that received the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ReplyToId">
            <summary>
            The original id this message is a response to
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IActivity.ChannelData">
            <summary>
            Channel specific payload
            </summary>
            <remarks>
            Some channels will provide channel specific data.
            
            For a message originating in the channel it might provide the original native schema object for the channel. 
            
            For a message coming into the channel it might accept a payload allowing you to create a "native" response for the channel.
            
            Example:
            * Email - The Email Channel will put the original Email metadata into the ChannelData object for outgoing messages, and will accep
            on incoming message a Subject property, and a HtmlBody which can contain Html.  
            
            The channel data essentially allows a bot to have access to native functionality on a per channel basis.
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsMessageActivity">
            <summary>
            Return IMessageActivity if this is a message activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsContactRelationUpdateActivity">
            <summary>
            Return IContactRelationUpdateActivity if this is a contactRelationUpdate activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsConversationUpdateActivity">
            <summary>
            Return IConversationUpdateActivity if this is a conversationUpdate activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsTypingActivity">
            <summary>
            Return ITypingActivity if this is a typing activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsEndOfConversationActivity">
            <summary>
            Return IEndOfConversationActivity if this is an end-of-conversation activity, null otherwise
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IActivity.AsTriggerActivity">
            <summary>
            Returns ITriggerActivity if this is a trigger activity, null otherwise
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IContactRelationUpdateActivity">
            <summary>
            Someone has updated their contact list
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IContactRelationUpdateActivity.Action">
            <summary>
            add|remove
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IConversationUpdateActivity">
            <summary>
            The Properties of a conversation are different
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.MembersAdded">
            <summary>
            Array of address added
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.MembersRemoved">
            <summary>
            Array of addresses removed
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IConversationUpdateActivity.TopicName">
            <summary>
            Conversations new topic name
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Connector.IMessageActivity">
            <summary>
            Someone has added a message to the conversation
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Locale">
            <summary>
            The language code of the Text field
            </summary>
            <remarks>
            See https://msdn.microsoft.com/en-us/library/hh456380.aspx for a list of valid language codes
            </remarks>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Text">
            <summary>
            Text for the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Summary">
            <summary>
            Text for the message
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.TextFormat">
            <summary>
            Format of text fields [plain|markdown] default:markdown
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.AttachmentLayout">
            <summary>
            AttachmentLayout - hint for how to deal with multiple attachments Values: [list|carousel] default:list
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Attachments">
            <summary>
            content attachemnts
            </summary>
        </member>
        <member name="P:Microsoft.Bot.Connector.IMessageActivity.Entities">
            <summary>
            Entities 
            Collection of objects which contain metadata about this activity
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IMessageActivity.HasContent">
            <summary>
            True if this activity has text, attachments, or channelData
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Connector.IMessageActivity.GetChannelData``1">
            <summary>
            Get channeldata as typed structure
            </summary>
            <typeparam name="TypeT">type to use</typeparam>
            <returns>typed object or default(TypeT)</returns>
        </member>
        <member name="M:Microsoft.Bot.Connector.IMessageActivity.GetMentions">
            <summary>
            Get mentions
            </summary>
        </member>
    </members>
</doc>
